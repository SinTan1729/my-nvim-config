global !p

# def math():
# 	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def get_env():
	return vim.eval('vimtex#env#get_inner()["name"]')

def in_env(lst):
	try:
		return get_env() in lst
	except:
		return False

def delline_exit(snip, match):
    cursorline = snip.line
    del snip.buffer[cursorline]
    snip.cursor.set(cursorline, len(match.group(1)) + 2 + len(get_env()))

endglobal

priority -10

## Convenience snippets

snippet boilerplate "Add Biolerplate Code" bw
\documentclass{article}
\usepackage[letterpaper, margin=1in]{geometry}
\usepackage{amsfonts, mathtools, amsmath, amssymb, enumitem, amsthm}
\usepackage[parfill]{parskip}

%% Some convenience comamnds
\newcommand{\tbf}[1]{\textbf{#1}}
\newcommand{\tit}[1]{\textit{#1}}
%% Implement basics of dirtytalk
\newcommand{\say}[1]{\`\`#1"}
\newcommand{\qt}[1]{\`#1'}

\title{$1}
\author{Sayantan Santra}

\begin{document}
	\maketitle
	${0:${VISUAL}}
\end{document}
endsnippet

snippet image_stuff "Image Related Stuff" bw
\usepackage{graphicx}
\graphicspath{ {./Images} }
$0
endsnippet

snippet refs_stuff "References Related Stuff" bw
\usepackage[backend=biber, style=alphabetic]{biblatex}
\usepackage{hyperref, bookmark, cleveref}
\addbibresource{references.bib}
$0
endsnippet

snippet custom_thms "Custom Theorem Environments" bw
%% Custom theorem environments
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}[theorem]
\newtheorem{lemma}[theorem]{Lemma}
\providecommand*{\lemmaautorefname}{Lemma}
\newtheorem{fact}[theorem]{Fact}
\newtheorem{definition}{Definition}
\newtheorem{example}{Example}
\newtheorem{conjecture}{Conjecture}
$0
endsnippet

snippet common_math "Shorthand for Common Math Stuff" bw
\newcommand{\ZZ}{\mathbb{Z}}
\newcommand{\QQ}{\mathbb{Q}}
\newcommand{\CC}{\mathbb{C}}
\newcommand{\FF}{\mathbb{F}}
\newcommand{\mat}[4]{\begin{psmallmatrix}#1 & #2 \\ #3 & #4\end{psmallmatrix}}
\newcommand{\mf}{\mathfrak}
\newcommand{\mc}{\mathcal}
$0
endsnippet

## Static snippets

snippet math "Inline Math" w
\( ${0:${VISUAL}} \)
endsnippet

snippet dmath "Display Math" w
\[ ${0:${VISUAL}} \]
endsnippet

snippet questions "Questions" bw
\begin{questions}
	\question $0
\end{questions}
endsnippet

snippet parts "Parts" bw
\begin{parts}
	\part $0
\end{parts}
endsnippet

snippet itemize "Itemize" bw
\begin{itemize}
	\item ${0:${VISUAL}}
\end{itemize}
endsnippet

snippet enumerate "Enumerate" bw
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet enumerate_label "Enumerate with Different Labels" bw
\begin{enumerate}[label=(${1:\alph*})]
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet vstretch "Stretch vspace" bw
\vspace*{\stretch{${1:1}}}
$0
endsnippet

snippet begin "Create an empty env" bw
\begin{${1:env}}
	${0:${VISUAL}}
\end{$1}
endsnippet

## Dynamic snippets

context in_env(["itemize", "enumerate", "parts"])
snippet "\\(item|part)\s*\S+.*" "create next item/part" rb
`!p snip.rv = match.group(0)`
\\`!p snip.rv = match.group(1)` $0
endsnippet

context in_env(["itemize", "enumerate", "parts"])
pre_expand "delline_exit(snip, match)"
snippet "(\s*)\\(item|part)\s*$" "exit item/part envs" r
`!p snip.rv = snip.mkline()`
$0
endsnippet

